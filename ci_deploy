#! /bin/groovy

buildPipelineFolder='Test 1'

stage("set-display-name") {
	def triggerBuild = getTriggerBuild()
	def envDisplay = env.deployment_environment ? " - ${env.deployment_environment}" : ''
	def displaySuffix = " (${triggerBuild.project.name} #${triggerBuild.number})"
	def nearestUp = getNearestUpstreamBuild()
	nearestUp.displayName = "${nearestUp.displayName}${displaySuffix}"
	currentBuild.displayName = "${currentBuild.displayName}${displaySuffix}${envDisplay}"
}

if (env.deployment_environment) {
	stage("deploy") {
    		node {
        		def triggerBuild = getTriggerBuild()
        		println "Deploying ${triggerBuild.project.name} ${triggerBuild.number} to env ${env.deployment_environment}"
			extractArtifacts(triggerBuild.artifactManager.root())
			triggerBuild = null
			sh "find . -ls"
			//sh "cat buildProperties.json"
    		}
	}
}

def extractArtifacts(virtualFile) {
	if (virtualFile.isFile()) {
		println "writing file ${virtualFile.name}"
		writeFile(virtualFile)
	} else if (virtualFile.name == 'archive') {
		println "extracting archive root"
		extractAtrifactsFromDirectory(virtualFile)
	} else {
		println "mkdir ${virtualFile.name}"
		sh "mkdir ${virtualFile.name}"
		dir(virtualFile.name) {
			extractAtrifactsFromDirectory(virtualFile)
		}
	}
}

def extractAtrifactsFromDirectory(dir) {
	for (def virtualFile : dir.list()) {
		extractArtifacts(virtualFile)
	}
}

@NonCPS
def writeFile(virtualFile) {
	def fos = new FileOutputStream(virtualFile.name)
	def is = virtualFile.open()
	byte[] buffer = new byte[2048]
	int count
	try {
		while ((count = is.read(buffer)) != -1) {
			fos.write(buffer, 0, count);
		}
	} finally {
		is.close()
		fos.flush()
		fos.close()
	}
}

def getTriggerBuild() {
    def run
    for (cause in currentBuild.rawBuild.getAction(CauseAction.class).causes) {
        run = getTriggerBuild(cause)
        if (run) break
    }          
    if (!run) {
        error "Could not find build run"
    }
    run
}

def getTriggerBuild(cause) {
    if (cause.class.toString().contains("UpstreamCause")) {
        if (cause.upstreamRun.project?.parent?.fullName == buildPipelineFolder) {
            return cause.upstreamRun
        }
        for (upCause in cause.upstreamCauses) {
            def run = getTriggerBuild(upCause)
            if (run) return run
        }
    }
}


def getNearestUpstreamBuild() {
    def run
    for (cause in currentBuild.rawBuild.getAction(CauseAction.class).causes) {
        run = getNearestUpstreamBuild(cause)
        if (run) break
    }          
    if (!run) {
        error "Could not find build run"
    }
    run
}

def getNearestUpstreamBuild(cause) {
    if (cause.class.toString().contains("UpstreamCause")) {
        return cause.upstreamRun
    }
}


